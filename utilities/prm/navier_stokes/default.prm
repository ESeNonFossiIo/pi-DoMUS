# Listing of Parameters
# ---------------------
subsection Dirichlet boundary conditions
  # Pattern to be used id followed by '=' component masks separated by ';'
  # each couple of id and mask is separated by '%' 0=0;1;2 % 4=u;p % 2=3 %
  # 5=ALL You can specify the components either by numbers or by the
  # corrisponding variable name, which are parsed at construction time. The
  # keyword 'ALL' means all the components. Normal component is referred with
  # suffix N e.g. uN means the normal component of u. note that the normal
  # component can be set only for a vector variable.
  set IDs and component masks = 0=ALL

  # Pattern to be used  id followed by '=' component separated by ';' each
  # couple of id and expression _id_functions separated by '%' 0=x;y;k;0 %
  # 4=sin(x);cos(y);2*k;1 % 2=0;0;0;0 If it is left empty, a
  # ZeroFunction<dim>(n_components) is applied on the parsed ids in the
  # components.
  set IDs and expressions     = 

  # These variables can be used to set the corrisponding component mask,
  # instead of specifying each component number
  set Known component names   = u,u,p

  # Costants which are employed in the definitions of the function
  # expressions. The pattern to be used is constant_name=value ,
  # other_constant=other_value
  set Used constants          = 
end


subsection Domain
  # Bool be used in the generation of the grid to set colorize. The use of it
  # will depend on the specific grid.
  set Colorize                   = false

  # The grid to generate. You can choose among:
  # - file: read grid from a file using:
  # 	- Input grid filename	    : input filename
  # 
  # - rectangle: create a subdivided hyperrectangle using:
  # 	- Optional Point<spacedim> 1: lower-left corner
  # 	- Optional Point<spacedim> 2: upper-right corner
  # 	- Optional Vector of dim int: subdivisions on each direction
  # 	- Optional bool 1	    : colorize grid
  # - subdivided_hyper_rectangle: create a subdivided hyperrectangle using:
  # 	- Optional Point<spacedim> 1: lower-left corner
  # 	- Optional Point<spacedim> 2: upper-right corner
  # 	- Optional Vector of dim int: subdivisions on each direction
  # 	- Optional bool 1	    : colorize grid
  # - hyper_sphere  : generate an hyper sphere with center and radius
  # prescribed:
  # 	- Optional Point<spacedim> : center
  # 	- Optional double : radius
  # - unit_hyperball  : initialize the given triangulation with a hyperball:
  # 
  # 	- Optional Point<spacedim> : center
  # 	- Optional double : radius
  # - subdivided_hyper_rectangle   : create a coordinate-parallel
  # parallelepiped:
  # 
  # 	- Optional std::vector<unsigned int> : number of subdivisions in each
  # coordinate direction
  # 	- Optional Point<spacedim> : lower-left corner
  # 	- Optional Point<spacedim> : upper-right corner
  # 	- Optional bool 1	    : colorize grid
  # - hyper_shell   : create a gird represented by the region between two
  # spheres with fixed center:
  # 
  # 	- Optional Point<spacedim> : center
  # 	- Optional double : inner sphere radius
  # 	- Optional double : outer sphere radius
  # 	- Optional unsigned int : number of cells of the resulting triangulation
  # (In 3d, only 6, 12, and 96 are allowed)
  # 	- Optional bool : colorize grid
  # - hyper_L : initialize the given triangulation with a hyper-L. It produces
  # the hypercube with the interval [left,right] without the hypercube made
  # out of the interval [(left+right)/2,right] for each coordinate.	- Optional
  # double : left
  # 	- Optional double : right
  # - half_hyper_ball : produce a half hyper-ball around center, which
  # contains four elements in 2d and 6 in 3d. The cut plane is perpendicular
  # to the x-axis:
  # 	- Optional Point<spacedim> : center
  # 	- Optional double : radius
  # - cylinder: create a cylinder around the x-axis. The cylinder extends from
  # x=-half_length to x=+half_length and its projection into the yz-plane is a
  # circle of radius radius:
  # 	- Optional double : radius
  # 	- Optional double : half length of the cylinder
  # - truncated_cone : create a cut cone around the x-axis. The cone extends
  # from x=-half_length to x=half_length and its projection into the yz-plane
  # is a circle of radius radius1 at x=-half_length and a circle of radius
  # radius2 at x=+half_length :
  # 	- Optional double : radius 1
  # 	- Optional double : radius 2
  # 	- Optional double : half length
  # - hyper_cross : a center cell with stacks of cell protruding from each
  # surface :
  # 	- Optional Vector of dim int: sizes
  # 	- Optional bool : colorize grid
  # - hyper_cube_slit : initialize the given Triangulation with a hypercube
  # with a slit. In each coordinate direction, the hypercube extends from left
  # to right :
  # 	- Optional double : left
  # 	- Optional double : right
  # 	- Optional bool : colorize grid
  # - half_hyper_shell : produce a half hyper-shell, i.e. the space between
  # two circles in two space dimensions and the region between two spheres in
  # 3d :
  # 	- Optional Point<spacedim> : center
  # 	- Optional double : inner radius
  # 	- Optional double : outer radius
  # 	- Optional unsigned int : number of cells
  # 	- Optional bool : colorize grid
  # - quarter_hyper_shell : Produce a domain that is the intersection between
  # a hyper-shell with given inner and outer radius, i.e. the space between
  # two circles in two space dimensions and the region between two spheres in
  # 3d, and the positive quadrant (in 2d) or octant (in 3d). In 2d, this is
  # indeed a quarter of the full annulus, while the function is a misnomer in
  # 3d because there the domain is not a quarter but one eighth of the full
  # shell :
  # 	- Optional Point<spacedim> : center
  # 	- Optional double : inner radius
  # 	- Optional double : outer radius
  # 	- Optional unsigned int : number of cells
  # 	- Optional bool : colorize grid
  # - cylinder_shell : produce a domain that is the space between two
  # cylinders in 3d, with given length, inner and outer radius and a given
  # number of elements for this initial triangulation. If n_radial_cells is
  # zero (as is the default), then it is computed adaptively such that the
  # resulting elements have the least aspect ratio. The same holds for
  # n_axial_cells :
  # 	- Optional double : lenght
  # 	- Optional double : inner radius
  # 	- Optional double : outer radius
  # 	- Optional unsigned int : n_radial_cells
  # 	- Optional unsigned int : n_axial_cells
  # - moebius : produce a ring of cells in 3d that is cut open, twisted and
  # glued together again. This results in a kind of moebius-loop :
  # 	- Optional unsigned int : number of cells in the loop
  # 	- Optional unsigned int : number of rotations (Pi/2 each) to be performed
  # before gluing the loop together
  # 	- Optional double : radius of the circle
  # 	- Optional double : radius of the cylinder bend together as loop
  # - hyper_cube_with_cylindrical_hole :  produces a square in the xy-plane
  # with a circular hole in the middle :
  # 	- Optional double : inner radius
  # 	- Optional double : outer radius
  # 	- Optional double : lenght
  # 	- Optional unsigned int : repetitions (number of subdivisions along the
  # z-direction)
  # 	- Optional bool : colorize grid
  # - torus : produce the surface meshing of the torus :
  # 	- Optional double : radius of the circle which forms the middle line of
  # the torus containing the loop of cells
  # 	- Optional double :  inner radius of the torus
  # - cheese : domain itself is rectangular. The argument holes specifies how
  # many square holes the domain should have in each coordinate direction :
  # 	- Optional Vector of dim int: number of holes on each direction
  set Grid to generate           = rectangle

  # Name of the input grid. All supported deal.II formats. The extestion will
  # be used to decide what grid format to use.
  set Input grid file name       = 
  set Mesh smoothing alogrithm   = none

  # First additional Point<spacedim> to be used in the generation of the grid.
  # The use of it will depend on the specific grid.
  set Optional Point<spacedim> 1 = 0,0

  # Second additional Point<spacedim> to be used in the generation of the
  # grid. The use of it will depend on the specific grid.
  set Optional Point<spacedim> 2 = 1,1

  # First additional double to be used in the generation of the grid. The use
  # of it will depend on the specific grid.
  set Optional double 1          = 1.0

  # Second additional double to be used in the generation of the grid. The use
  # of it will depend on the specific grid.
  set Optional double 2          = 0.5

  # Second additional double to be used in the generation of the grid. The use
  # of it will depend on the specific grid.
  set Optional double 3          = 1.5

  # Unsigned int to be used in the generation of the grid. The use of it will
  # depend on the specific grid.
  set Optional int 1             = 1

  # Unsigned int to be used in the generation of the grid. The use of it will
  # depend on the specific grid.
  set Optional int 2             = 2

  # Vector of positive unsigned int to be used in the generation of the grid.
  # The use of it will depend on the specific grid.
  set Optional vector of dim int = 1,1

  # Name of the output grid. All supported deal.II formats. The extestion will
  # be used to decide what grid format to use. If empty, no grid will be
  # written.
  set Output grid file name      = 
end


subsection Error Tables
  set Compute error            = true
  set Error file format        = tex
  set Output error tables      = true
  # Comma separated list of names for the components. This will be used both
  # for error tables in text format and to output the solution to a file. Note
  # that in the case of a vector function the error name which is used to
  # compute the norm (supposing the type of the other components is 'Add') is
  # the first one.
  set Solution names           = u,u,p

  # Comma separated version of the same thing as above for the latex version
  # of the table.
  set Solution names for latex = u,u,p

  # Comma separated list of table names.
  set Table names              = error
  set Write error files        = false


  subsection Table 0
    # Evaluate convergence rates and add a column to the table for each
    # computed norm.
    set Add convergence rates          = true

    # The extra columns to add to the table.
    set Extra terms                    = cells,dofs

    # The caption that will go under the table if we write the file in tex
    # format. The default value for this object is the same name as the table
    # name.
    set Latex table caption            = error

    # Each component is separated by a semicolon, and each norm by a comma.
    # Implemented norms are Linfty, L2, H1, AddUp, which means that the norm
    # is added to the previous component, and Custom.
    set List of error norms to compute = L2,H1;L2,H1;L2,H1

    # The key to use to compute the convergence rates.
    set Rate key                       = 
  end

end


subsection Exact solution
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the muparser library at http://muparser.beltoforion.de/.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection Forcing terms
  # Pattern to be used id followed by '=' component masks separated by ';'
  # each couple of id and mask is separated by '%' 0=0;1;2 % 4=u;p % 2=3 %
  # 5=ALL You can specify the components either by numbers or by the
  # corrisponding variable name, which are parsed at construction time. The
  # keyword 'ALL' means all the components. Normal component is referred with
  # suffix N e.g. uN means the normal component of u. note that the normal
  # component can be set only for a vector variable.
  set IDs and component masks = 0=ALL

  # Pattern to be used  id followed by '=' component separated by ';' each
  # couple of id and expression _id_functions separated by '%' 0=x;y;k;0 %
  # 4=sin(x);cos(y);2*k;1 % 2=0;0;0;0 If it is left empty, a
  # ZeroFunction<dim>(n_components) is applied on the parsed ids in the
  # components.
  set IDs and expressions     = 

  # These variables can be used to set the corrisponding component mask,
  # instead of specifying each component number
  set Known component names   = u,u,p

  # Costants which are employed in the definitions of the function
  # expressions. The pattern to be used is constant_name=value ,
  # other_constant=other_value
  set Used constants          = 
end


subsection IDA Solver Parameters
  set Absolute error tolerance                      = 1e-4
  set Final time                                    = 1
  # Indicate whether or not to suppress algebraic variables in the local error
  # test.
  set Ignore algebraic terms for error computations = false
  set Initial condition Newton max iterations       = 5
  set Initial condition Newton parameter            = 0.33

  # This is one of the following thress options for the initial condition
  # calculation.
  # none: do not try to make initial conditions consistent.
  # use_y_diff: compute the algebraic components of y and differential
  # components of y_dot, given the differential components of y.
  # This option requires that the user specifies differential and
  # algebraic components in the function get_differential_components.
  # use_y_dot: compute all components of y, given y_dot.
  set Initial condition type                        = use_y_diff

  # This is one of the following thress options for the initial condition
  # calculation.
  # none: do not try to make initial conditions consistent.
  # use_y_diff: compute the algebraic components of y and differential
  # components of y_dot, given the differential components of y.
  # This option requires that the user specifies differential and
  # algebraic components in the function get_differential_components.
  # use_y_dot: compute all components of y, given y_dot.
  set Initial condition type after restart          = use_y_dot
  set Initial step size                             = 1e-4
  set Initial time                                  = 0
  set Maximum number of nonlinear iterations        = 10
  set Maximum order of BDF                          = 5
  set Min step size                                 = 5e-5
  set Relative error tolerance                      = 1e-3
  set Seconds between each output                   = 1e-1
  set Show output of time steps                     = true
  set Use local tolerances                          = false
end


subsection Initial solution
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the muparser library at http://muparser.beltoforion.de/.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection Initial solution_dot
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the muparser library at http://muparser.beltoforion.de/.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection Navier Stokes
  # Coupling between the blocks of the finite elements in the system:
  # 0: No coupling
  # 1: Full coupling
  # 2: Coupling only on faces
  set Block coupling                   = 1,1; 1,0

  # Set the blocks of differential components to 10 for algebraic
  set Block of differential components = 1,0

  # How to partition the finite element. This information can be used to
  # construct block matrices and vectors, as well as to create names for
  # solution vectors, or error tables. A repeated component is interpreted as
  # a vector field, with dimension equal to the number of repetitions (up to
  # 3). This is used in conjunction with a ParsedFiniteElement class, to
  # generate arbitrary finite dimensional spaces.
  set Blocking of the finite element   = u,u,p

  # The finite element space to use. For vector finite elements use the
  # notation FESystem[FE_Q(2)^2-FE_DGP(1)] (e.g. Navier-Stokes).
  set Finite element space             = FESystem[FE_Q(2)^d-FE_Q(1)]
  set Preconditioner                   = default

  # Coupling between the blocks of the finite elements in the preconditioner:
  # 0: No coupling
  # 1: Full coupling
  # 2: Coupling only on faces
  set Preconditioner block coupling    = 1,0; 0,1
  set nu [Pa s]                        = 1.0
  set rho [kg m^3]                     = 1.0
end


subsection Neumann boundary conditions
  # Pattern to be used id followed by '=' component masks separated by ';'
  # each couple of id and mask is separated by '%' 0=0;1;2 % 4=u;p % 2=3 %
  # 5=ALL You can specify the components either by numbers or by the
  # corrisponding variable name, which are parsed at construction time. The
  # keyword 'ALL' means all the components. Normal component is referred with
  # suffix N e.g. uN means the normal component of u. note that the normal
  # component can be set only for a vector variable.
  set IDs and component masks = 0=ALL

  # Pattern to be used  id followed by '=' component separated by ';' each
  # couple of id and expression _id_functions separated by '%' 0=x;y;k;0 %
  # 4=sin(x);cos(y);2*k;1 % 2=0;0;0;0 If it is left empty, a
  # ZeroFunction<dim>(n_components) is applied on the parsed ids in the
  # components.
  set IDs and expressions     = 

  # These variables can be used to set the corrisponding component mask,
  # instead of specifying each component number
  set Known component names   = u,u,p

  # Costants which are employed in the definitions of the function
  # expressions. The pattern to be used is constant_name=value ,
  # other_constant=other_value
  set Used constants          = 
end


subsection Output Parameters
  set Incremental run prefix = 
  set Output format          = vtu
  set Output partitioning    = false
  set Problem base name      = solution
  # Comma separated list of names for the components. If a name is repeated,
  # then the repeated names are grouped into vectors.
  set Solution names         = u
  set Subdivisions           = 1
end


subsection Refinement
  # Coarsening fraction.
  set Bottom fraction                        = 0.100000

  # Maximum number of cells.
  set Maximum number of cells (if available) = 0

  # Maximum number of cells.
  set Order (optimize)                       = 2

  # Refinement strategy to use. fraction|number
  set Refinement strategy                    = fraction

  # Refinement fraction.
  set Top fraction                           = 0.300000
end


subsection piDoMUS<2, 2, 3, LATrilinos>
  set Adaptive refinement            = true
  set Initial global refinement      = 1
  set Maximum number of time steps   = 10000
  set Number of cycles               = 3
  set Use direct solver if available = true
end


